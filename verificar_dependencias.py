#!/usr/bin/env python3
"""
VERIFICADOR DE DEPENDENCIAS
===========================
Script para verificar que todas las dependencias est√°n correctamente instaladas.
"""

import sys
import importlib.util
from pathlib import Path

def verificar_modulo(nombre_modulo, nombre_paquete=None, requerido=True):
    """
    Verifica si un m√≥dulo est√° instalado.

    Args:
        nombre_modulo: Nombre del m√≥dulo a importar
        nombre_paquete: Nombre del paquete para instalaci√≥n (si es diferente)
        requerido: Si el m√≥dulo es requerido o opcional

    Returns:
        bool: True si est√° instalado, False si no
    """
    try:
        spec = importlib.util.find_spec(nombre_modulo)
        if spec is not None:
            print(f"‚úÖ {nombre_modulo:<20} - Instalado")
            return True
        else:
            status = "‚ùå REQUERIDO" if requerido else "‚ö†Ô∏è  Opcional"
            paquete = nombre_paquete or nombre_modulo
            print(f"{status} {nombre_modulo:<15} - pip install {paquete}")
            return False
    except Exception as e:
        status = "‚ùå ERROR" if requerido else "‚ö†Ô∏è  Error"
        print(f"{status} {nombre_modulo:<18} - Error: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n."""
    print("üîç VERIFICANDO DEPENDENCIAS DEL CLASIFICADOR DE PDFs")
    print("=" * 60)

    # Dependencias principales (requeridas)
    print("\nüì¶ DEPENDENCIAS PRINCIPALES:")
    dependencias_principales = [
        ("google.generativeai", "google-generativeai"),
        ("fitz", "PyMuPDF"),
        ("dotenv", "python-dotenv"),
    ]

    principales_ok = True
    for modulo, paquete in dependencias_principales:
        if not verificar_modulo(modulo, paquete, requerido=True):
            principales_ok = False

    # Dependencias para interfaz visual (opcionales)
    print("\nüé® DEPENDENCIAS PARA INTERFAZ VISUAL:")
    dependencias_visuales = [
        ("colorama", "colorama"),
        ("rich", "rich"),
    ]

    visuales_ok = True
    for modulo, paquete in dependencias_visuales:
        if not verificar_modulo(modulo, paquete, requerido=False):
            visuales_ok = False

    # Dependencias est√°ndar de Python
    print("\nüêç M√ìDULOS EST√ÅNDAR DE PYTHON:")
    modulos_estandar = [
        "os", "sys", "json", "time", "csv", "logging",
        "shutil", "re", "pathlib", "datetime", "argparse"
    ]

    for modulo in modulos_estandar:
        verificar_modulo(modulo, requerido=True)

    # Resumen
    print("\n" + "=" * 60)
    print("üìã RESUMEN:")

    if principales_ok:
        print("‚úÖ Dependencias principales: TODAS INSTALADAS")
        print("   ‚Üí El clasificador b√°sico funcionar√° correctamente")
    else:
        print("‚ùå Dependencias principales: FALTAN ALGUNAS")
        print("   ‚Üí Ejecuta: pip install -r requirements-minimal.txt")

    if visuales_ok:
        print("‚úÖ Dependencias visuales: TODAS INSTALADAS")
        print("   ‚Üí El men√∫ interactivo colorido estar√° disponible")
    else:
        print("‚ö†Ô∏è  Dependencias visuales: FALTAN ALGUNAS")
        print("   ‚Üí Para interfaz completa: pip install -r requirements.txt")
        print("   ‚Üí El programa funcionar√° en modo b√°sico")

    # Verificar archivos de configuraci√≥n
    print("\nüîß CONFIGURACI√ìN:")
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ Archivo .env encontrado")

        # Verificar API key
        try:
            with open(env_file, 'r') as f:
                content = f.read()
                if "GOOGLE_API_KEY=" in content and len(content.split("GOOGLE_API_KEY=")[1].split()[0]) > 10:
                    print("‚úÖ API Key configurada en .env")
                else:
                    print("‚ö†Ô∏è  API Key en .env parece incompleta")
        except:
            print("‚ö†Ô∏è  No se pudo verificar API Key en .env")
    else:
        print("‚ùå Archivo .env no encontrado")
        print("   ‚Üí Crea un archivo .env con tu GOOGLE_API_KEY")

    # Recomendaciones
    print("\nüí° RECOMENDACIONES:")
    if not principales_ok:
        print("1. Instala las dependencias principales primero")
        print("2. Configura tu API Key de Google Gemini")
        print("3. Prueba el clasificador b√°sico")
    elif not visuales_ok:
        print("1. Considera instalar las dependencias visuales para mejor experiencia")
        print("2. Usa 'python main.py' para men√∫ interactivo")
    else:
        print("1. ¬°Todo est√° listo! Usa 'python main.py' para empezar")
        print("2. El men√∫ interactivo estar√° disponible con todas las funciones")

    return 0 if principales_ok else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã Verificaci√≥n interrumpida")
        sys.exit(0)